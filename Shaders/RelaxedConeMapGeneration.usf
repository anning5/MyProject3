const int SearchSteps = 128;
float BestConeRatio = 1;
const float Epsilon = .000001;//This is to make sure the starting point of the ray marching is always above all points in the relief map. Without this Epsilon a type of "crack" artefact will occur when the surface depth is 0 in the relief making the view vector completely horizontal causing the division by 0 error

float2 halfTexelSize = TexelSize.xy * 0.5;

float currentTexelDepth = Texture2DSampleLevel(ReliefBumpMap, ReliefBumpMapSampler, UV, 0).w;
//Find the best ratio from the batch of texels
[loop]
for(int i = (int)StartTexelIndex; i < (int)EndTexelIndex; i++)
{
	int rowIndex = i / (int)TexelSize.z;
	int colomnIndex = i % (int)TexelSize.z;
	float2 lookUpUV = float2(colomnIndex * TexelSize.x + halfTexelSize.x, rowIndex * TexelSize.y + halfTexelSize.y);

	float3 p = float3(UV, 0);

	float3 o = float3(lookUpUV, 0);
	o.z = Texture2DSampleLevel(ReliefBumpMap, ReliefBumpMapSampler, o.xy, 0).w;

	float3 v = o - p;
	v /= max(v.z, Epsilon);
	v *= 1.0 - o.z;
	v /= SearchSteps;

	p = o;

	//Keep stepping forward until we have just come out(the second intersection between the ray and the relief surface) of the relief surface
	[loop]
	for(int j = 0; j < SearchSteps; j++)
	{
		float d = Texture2DSampleLevel(ReliefBumpMap, ReliefBumpMapSampler, p.xy, 0).w;

		if (d <= p.z)
		{
			p += v;

			//Confine the ray marching within the relief map's [0-1] range to avoid the depth outside the range taken to corrupt the cone calculation
			float2 saturatedPXY = saturate(p.xy);
			if(p.x != saturatedPXY.x)
			{
				p -= (p.x - saturatedPXY.x) / v.x * v;
			}
			else if(p.y != saturatedPXY.y)
			{
				p -= (p.y - saturatedPXY.y) / v.y * v;
			}
		}
	}

	float ratio = length(p.xy - UV);

	if(p.z - currentTexelDepth > -.001)//The -.001 here is to add some floating point error tolerance
	{
		ratio = 1;
	}
	else
	{
		int steps = 128;
		v = (o - p) / steps;
		float3 minP = p;
		[loop]
		for(int j = 0; j < steps; j++)
		{
			p += v;
			float depth = Texture2DSampleLevel(ReliefBumpMap, ReliefBumpMapSampler, p.xy, 0).w;
			if(depth < minP.z)
			{
				minP.xy = p.xy;
				minP.z = depth;
			}
		}

		p = minP;

		ratio = length(p.xy - UV);
		ratio = ratio / (currentTexelDepth - p.z);
	}

	if (BestConeRatio > ratio)
	{
		BestConeRatio = ratio;
	}
}

//ConeSteppingMap stores the best ratio found in all previous draw calls so far, which will be compared with the best ratio found in the current draw call to get the latest best ratio
float ratio = Texture2DSampleLevel(ConeSteppingMap, ConeSteppingMapSampler, UV, 0).x;
if(BestConeRatio > ratio)
{
	BestConeRatio = ratio;
}

return float4(BestConeRatio, currentTexelDepth, 0, 0);
