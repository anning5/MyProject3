const int SearchSteps = 128;
float BestConeRatio = 1;

float2 halfTexelSize = TexelSize.xy * 0.5;
//halfTexelSize = 0; 

float currentTexelDepth = Texture2DSample(ReliefBumpMap, ReliefBumpMapSampler, UV).w;
//Find the best ratio from the batch of texels
for(int i = (int)StartTexelIndex; i < (int)EndTexelIndex; i++)
{
	int rowIndex = i / (int)TexelSize.z;
	int colomnIndex = i % (int)TexelSize.z;
	float2 lookUpUV = float2(colomnIndex * TexelSize.x + halfTexelSize.x, rowIndex * TexelSize.y + halfTexelSize.y);

	float3 p = float3(UV, 0);

	float3 o = float3(lookUpUV, 0);
	o.z = Texture2DSample(ReliefBumpMap, ReliefBumpMapSampler, o.xy).w;

	float3 v = o - p;
	v /= v.z;
	v *= 1.0 - o.z;
	v /= SearchSteps;

	p = o;

	//Keep stepping forward until we have just come out(the second intersection between the ray and the relief surface) of the relief surface
	for(int j = 0; j < SearchSteps; j++)
	{
		float d = Texture2DSample(ReliefBumpMap, ReliefBumpMapSampler, p.xy).w;

		if (d <= p.z)
			p += v;
	}
//	if(abs(p.x) < 0.01)
//	{
//		p.z = .07843;
//	}
	
	int steps = 128;
	v = (o - p) / steps;
	float3 p1 = o;
	for(int j = 0; j < steps; j++)
	{
		p += v;
		float depth = Texture2DSample(ReliefBumpMap, ReliefBumpMapSampler, p.xy).w;
		if(depth < p1.z)
		{
			p1 = p;
		}
	}
	p = p1;

	float ratio = length(p.xy - UV);

	ratio = (p.z >= currentTexelDepth) ? 1.0 : ratio / (currentTexelDepth - p.z);		

	if (BestConeRatio > ratio)
	{
		BestConeRatio = ratio;
	}
}

//ConeSteppingMap stores the best ratio found in all previous draw calls so far, which will be compared with the best ratio found in the current draw call to get the latest best ratio
float ratio = Texture2DSample(ConeSteppingMap, ConeSteppingMapSampler, UV).x;
if(BestConeRatio > ratio)
{
	BestConeRatio = ratio;
}

return float4(BestConeRatio, currentTexelDepth, 0, 0);
