//A forward declaration of the external relaxed cone stepping function
void RelaxedConeStepping(float3 v, inout float3 p, const int ConeSteps, const int BinarySteps, Texture2D RelaxedConeReliefMap, SamplerState RelaxedConeReliefMapSampler);

const int ConeSteps=15;
const int BinarySteps=8;

float3 p = float3(UV, 0);
float3 BiNormalLS = cross(NormalLS, TangentLS);
float3x3 tangentSpaceMatrix = float3x3(TangentLS, BiNormalLS, NormalLS);

//Run the relaxed cone stepping to find the new relief UV
float3 v = PosLS - CamPosLS;
v = mul(tangentSpaceMatrix, v);
v.z = abs(v.z);
v.xy *= DepthScale;

RelaxedConeStepping(v, p, ConeSteps, BinarySteps, RelaxedConeReliefMap, RelaxedConeReliefMapSampler);

float3 reliefIntersection = p;

float3 reliefColor = Texture2DSample(ReliefColorMap, ReliefColorMapSampler, reliefIntersection.xy).rgb;
float3 normal = Texture2DSample(ReliefBumpMap, ReliefBumpMapSampler, saturate(reliefIntersection.xy)).rgb * 2 - 1;
normal.y = -normal.y;
//normal.z /= DepthScale;

float3 diffuse = 0, cosTheta, depthBias;

////////////////////////////////////////////////////////////////////////////////
//Run the relaxed cone stepping for the directional light's shadowing calculation
////////////////////////////////////////////////////////////////////////////////
float3 directionalLightTS = normalize(mul(tangentSpaceMatrix, DirectionalLightLS));

float3 directionalLightDiffuse = saturate(dot(normal, directionalLightTS.xyz));
directionalLightDiffuse *= dot(NormalLS, directionalLightTS) > 0;//Make sure the light coming from the back of the relief does not light the relief
diffuse += directionalLightDiffuse;

v = -directionalLightTS;
v.z = abs(v.z);

p -= p.z / v.z * v;//Find the starting point from the light direction

RelaxedConeStepping(v, p, ConeSteps, BinarySteps, RelaxedConeReliefMap, RelaxedConeReliefMapSampler);

//Below is an optimisation of saturate(dot(float3(0, 0, 1), directionalLightTS.xyz))
cosTheta = saturate(directionalLightTS.z);

depthBias = max(.04, tan(acos(cosTheta)) * 0.005);
float directionalLightShadow = 0.9 * ((reliefIntersection.z - depthBias) > p.z);

float shadow = 1;
shadow -= directionalLightShadow;

////////////////////////////////////////////////////////////////////////////////
//Run the relaxed cone stepping for the point light's shadowing calculation
////////////////////////////////////////////////////////////////////////////////
p = reliefIntersection;
reliefIntersection.z = -reliefIntersection.z;//The intersection point has a negative z in the tangent space
float3 pointLightDirectionTS = PointLightPosTS - reliefIntersection;
reliefIntersection.z = -reliefIntersection.z;

float3 pointLightDistance = length(pointLightDirectionTS);

v = -pointLightDirectionTS;
v.z = abs(v.z);
p -= p.z / v.z * v;//Find the starting point from the light direction

RelaxedConeStepping(v, p, ConeSteps, BinarySteps, RelaxedConeReliefMap, RelaxedConeReliefMapSampler);

pointLightDirectionTS = normalize(pointLightDirectionTS);

float3 pointLightDiffuse = saturate(dot(normal, pointLightDirectionTS)) / (pointLightDistance * pointLightDistance);
pointLightDiffuse *= dot(NormalLS, pointLightDirectionTS) > 0;//Make sure the light coming from the back of the relief does not light the relief
diffuse += pointLightDiffuse;

//Below is an optimisation of saturate(dot(float3(0, 0, 1), pointLightDirectionTS.xyz))
cosTheta = saturate(pointLightDirectionTS.z);

depthBias = max(.04, tan(acos(cosTheta)) * 0.005);
float pointLightShadow = 0.9 * ((reliefIntersection.z - depthBias) > p.z);
shadow -= pointLightShadow;

return float4(reliefColor * diffuse * shadow, 1);
return float4(reliefColor * diffuse, 1);
return float4(reliefColor * shadow, 1);
return float4(reliefColor, 1);

